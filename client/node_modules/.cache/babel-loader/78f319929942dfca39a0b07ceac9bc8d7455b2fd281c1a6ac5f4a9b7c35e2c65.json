{"ast":null,"code":"import axios from 'axios';\nexport const API_URL = `http://localhost:8080/api`;\nconst $api = axios.create({\n  withCredentials: true,\n  baseURL: API_URL\n});\n$api.interceptors.request.use(config => {\n  config.headers.Authorization = `Bearer ${localStorage.getItem('token')}`;\n  return config;\n});\n\n// $api.interceptors.response.use(\n//   (config) => {\n//     return config;\n//   },\n//   async (error) => {\n//     //originalRequest нужна чтобы не циклило 401 , а так этот кусок отрабатывает при окончании действия access и выдает новый ,если refresh ещё живой\n\n//     const originalRequest = error.config;\n//     if (error.response.status === 401 && error.config && !error.config.isRetry) {\n//       originalRequest.isRetry = true;\n//       try {\n//         const response = await axios.get<AuthResponse>(`${API_URL}/refresh`, {\n//           withCredentials: true,\n//         });\n//         localStorage.setItem('token', response.data.accessToken);\n//         return $api.request(originalRequest);\n//       } catch (error) {\n//         console.log('Не авторизован');\n//       }\n//     }\n//     if (error.response?.status !== 401) {\n//       return Promise.reject(error);\n//     }\n\n//     // Для ошибки 401 просто логируем и возвращаем неразрешенный промис\n//     console.log('Не авторизован');\n//     return Promise.reject(error);\n//     // throw error\n//   },\n// );\n\nexport default $api;","map":{"version":3,"names":["axios","API_URL","$api","create","withCredentials","baseURL","interceptors","request","use","config","headers","Authorization","localStorage","getItem"],"sources":["C:/Users/User/Desktop/todoJwt/client/src/http/todo.ts"],"sourcesContent":["import axios from 'axios';\r\nimport { AuthResponse } from '../modules/response/AuthResponse';\r\n\r\nexport const API_URL = `http://localhost:8080/api`;\r\n\r\nconst $api = axios.create({\r\n  withCredentials: true,\r\n  baseURL: API_URL,\r\n});\r\n\r\n$api.interceptors.request.use((config) => {\r\n  config.headers.Authorization = `Bearer ${localStorage.getItem('token')}`;\r\n  return config;\r\n});\r\n\r\n// $api.interceptors.response.use(\r\n//   (config) => {\r\n//     return config;\r\n//   },\r\n//   async (error) => {\r\n//     //originalRequest нужна чтобы не циклило 401 , а так этот кусок отрабатывает при окончании действия access и выдает новый ,если refresh ещё живой\r\n\r\n//     const originalRequest = error.config;\r\n//     if (error.response.status === 401 && error.config && !error.config.isRetry) {\r\n//       originalRequest.isRetry = true;\r\n//       try {\r\n//         const response = await axios.get<AuthResponse>(`${API_URL}/refresh`, {\r\n//           withCredentials: true,\r\n//         });\r\n//         localStorage.setItem('token', response.data.accessToken);\r\n//         return $api.request(originalRequest);\r\n//       } catch (error) {\r\n//         console.log('Не авторизован');\r\n//       }\r\n//     }\r\n//     if (error.response?.status !== 401) {\r\n//       return Promise.reject(error);\r\n//     }\r\n\r\n//     // Для ошибки 401 просто логируем и возвращаем неразрешенный промис\r\n//     console.log('Не авторизован');\r\n//     return Promise.reject(error);\r\n//     // throw error\r\n//   },\r\n// );\r\n\r\nexport default $api;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAGzB,OAAO,MAAMC,OAAO,GAAI,2BAA0B;AAElD,MAAMC,IAAI,GAAGF,KAAK,CAACG,MAAM,CAAC;EACxBC,eAAe,EAAE,IAAI;EACrBC,OAAO,EAAEJ;AACX,CAAC,CAAC;AAEFC,IAAI,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EACxCA,MAAM,CAACC,OAAO,CAACC,aAAa,GAAI,UAASC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAE,EAAC;EACxE,OAAOJ,MAAM;AACf,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeP,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}